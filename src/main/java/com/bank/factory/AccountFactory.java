package com.bank.factory;

import com.bank.model.Account;
import com.bank.model.Account.AccountType;
import com.bank.model.Account.InterestStrategyType;

import java.math.BigDecimal;
import java.util.UUID;

public class AccountFactory {

    public static Account createAccount(UUID userId, AccountType accountType, InterestStrategyType interestStrategy) {
        if (accountType == null) {
            throw new IllegalArgumentException("Account type cannot be null.");
        }
        String accountNumber = generateAccountNumber(); // This should be unique and ideally generated by a service
        return new Account(UUID.randomUUID(), userId, accountNumber, accountType, BigDecimal.ZERO, interestStrategy);
    }

    private static String generateAccountNumber() {
        // Simple random 10-digit number for demonstration. In a real system, this would be more robust.
        return String.format("%010d", (int) (Math.random() * 1_000_000_000));
    }
}

